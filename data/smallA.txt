!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Data set: smallA
! - Small problem instance constructed to test model
! - Varied requirements for bandwidth and latency
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

n_Customers: 3	! number of customers
n_Services: 5	! number of services in total
n_Providers: 2	! number of providers
n_Nodes: 10		! number of nodes in total (customer, internal and provider nodes)

Symmetric: false ! indicates wether or not arc provided in dataset goes both ways

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Customers, Services and Providers data
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! (c) Revenue from serving customer c
R_Revenue: [1800	2400	1400]

! (c) Set of services for customers c
S_ServiceForCustomer:	[
	[1	2]
	[3]
	[4	5]
]

! (s) Required maximum latency for service s from customer to provider (UPLINK)
G_LatencyReq: [70	200	40	250	50]

! (s) Required maximum latency for service s from provider to customer (DOWNLINK)
G_LatencyReqD: [45	120	45	250	80]

! (s) Required bandwidth for service s from customer to provider (UPLINK
B_BandwidthReq: [10	5	60	40	40]

! (s) Required bandwith for service s from provider to customer (DOWNLINK)
B_BandwidthReqD: [40	30	40	10	15]

! (s, p) Price of placing service s at provider p
H_PlacePrice: [
	200	120
	120	80
	180	160
	180	160
	310	280
]
Y_AvailabilityReq: [
	0.89	0.97	0.99	0.9	0.99
]

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Network data
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!!! Own network

! (i,j) Latency for arc between nodes i and j
T_LinkLatency: [
	(1 4) 20
	(2 4) 15	(2 5) 35	
	(3 5) 25
	(4 1) 20	(4 2) 15	(4 6) 15	(4 7) 15
	(5 2) 35	(5 3) 25	(5 6) 15	(5 8) 20
	(6 4) 15	(6 5) 15	(6 7) 15	(6 8) 15
	(7 4) 10	(7 6) 15	(7 9) 15	(7 10) 30
	(8 5) 20	(8 6) 15	(8 9) 20	(8 10) 20
	(9 7) 10	(9 8) 20	
	(10 7) 20	(10 8) 10	
]

! (i,j) Bandwidth capacity between nodes i and j
F_BandwidthCap: [
	(1 4) 50
	(2 4) 50	(2 5) 50	
	(3 5) 50	
	(4 1) 50	(4 2) 50	(4 6) 50	(4 7) 50
	(5 2) 50	(5 3) 50	(5 6) 50	(5 8) 50	
	(6 4) 50	(6 5) 50	(6 7) 50	(6 8) 50
	(7 4) 50	(7 6) 50	(7 9) 50	(7 10) 50	
	(8 5) 50	(8 6) 50	(8 9) 50	(8 10) 50
	(9 7) 50	(9 8) 50
	(10 7) 50	(10 8) 50
]

! (i,j) Price per unit of used own capacity between node i and j
K_CapPrice: [
	(1 4) 1
	(2 4) 1		(2 5) 1
	(3 5) 1
	(4 1) 1		(4 2) 1	(4 6) 1	(4 7) 1
	(5 2) 1		(5 3) 1	(5 6) 1	(5 8) 1
	(6 4) 1		(6 5) 1	(6 7) 1	(6 8) 1
	(7 4) 1		(7 6) 1	(7 9) 1	(7 10) 1
	(8 5) 1		(8 6) 1	(8 9) 1	(8 10) 1 
	(9 7) 1		(9 8) 1	
	(10 7) 1	(10 8) 1 
]

D_AvailabilityExp: [
	(1 4) 0.99
	(2 4) 0.99		(2 5) 0.9999
	(3 5) 0.9
	(4 1) 0.89  	(4 2) 0.999	(4 6) 0.9996	(4 7) 0.9996
	(5 2) 0.88		(5 3) 0.999	(5 6) 0.9996	(5 8) 0.9996
	(6 4) 0.99		(6 5) 0.99	(6 7) 0.9996	(6 8) 0.9996
	(7 4) 0.999		(7 6) 0.98	(7 9) 0.9996	(7 10) 0.9996
	(8 5) 0.97		(8 6) 0.99	(8 9) 0.9996	(8 10) 0.9996 
	(9 7) 0.91		(9 8) 0.9999	
	(10 7) 0.999	(10 8) 0.9999 
]

!!! Leasable network

! (i,j) Price per unit leased capacity between node i and j
L_LeasedPrice: [
	(1 9) 5	(1 10) 6
	(2 9) 5(2 10) 6
	(3 9) 5	(3 10) 6		
	(9 1) 5	(9 2) 5	(9 3) 5
	(10 1) 6	(10 2) 6	(10 3) 6
]

! (i,j) Latency for leased link between nodes i and j
V_LeaseLatency: [
	(1 9) 40	(1 10) 50
	(2 9) 40	(2 10) 50
	(3 9) 40	(3 10) 50
	(9 1) 40	(9 2) 40	(9 3) 40
	(10 1) 50	(10 2) 50	(10 3) 50
]

! (i,j) Capacity for leased link between nodes i and j
O_LeasedBandwidthCap:[
	(1 9) 1000	(1 10) 1000
	(2 9) 1000	(2 10) 1000
	(3 9) 1000	(3 10) 1000
	(9 1) 1000	(9 2) 1000	(9 3) 1000
	(10 1) 1000	(10 2) 1000	(10 3) 1000]