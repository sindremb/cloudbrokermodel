model CarrierBrokerPathModel
uses "mmxprs"; !gain access to the Xpress-Optimizer solver

options explterm
options noimplicit

uses "mmxprs", "mmsystem";

parameters
	! Data file to read from
	Data = 'smallpathA.txt';
end-parameters

declarations
	timetracker:	real; ! used to log timestamps for time consumption output
end-declarations

writeln("Building model...");
timetracker := timestamp;

!setparam("XPRS_presolve", 0);	! uncomment to turn of presolve
setparam("XPRS_maxtime", 3600); ! maximum number of seconds for optimisation

!!!!!!!!!!!!!!!!!!!!!!!!
! Sets
!!!!!!!!!!!!!!!!!!!!!!!!

declarations
! Set sizes
	n_Customers: 			integer; ! number of customers
	n_Services:				integer; ! number of services
	n_Providers:			integer; ! number of providers
	n_Nodes:				integer; ! number of nodes in total
	n_Paths:				integer; ! number of paths
	n_BackupPaths:			integer; ! number of backup paths
	
! Sets	
	Customers:				set of integer; 
	Providers:				set of integer;
	! Used as shorthand for 'cc in Customers, ss in S_ServiceForCustomer(cc)' when cc is not needed 
	Services:				set of integer;
	! Set of nodes in the network. 
	! - First we have the customer nodes, then the internal nodes, the the provider nodes.
	Nodes:					set of integer;
	
	Paths:					set of integer; 
	
	BackupPaths:			set of integer;
	
end-declarations

initializations from Data
	n_Customers;
	n_Services;
	n_Providers;
	n_Nodes;
	n_Paths;
	n_BackupPaths;
end-initializations
	
Customers:= 1..n_Customers;
Services:= 1..n_Services;  
Providers:= 1..n_Providers;
Nodes:= 1..n_Nodes;
Paths := 1..n_Paths;
BackupPaths := 1..n_BackupPaths;

finalize(Customers);
finalize(Services);
finalize(Providers);
finalize(Nodes);
finalize(Paths);
finalize(BackupPaths);

!!!!!!!!!!!!!!!!!!!!!!!
! Parameters
!!!!!!!!!!!!!!!!!!!!!!!

declarations
	!R_Revenue from serving each customer
	R_Revenue:					dynamic array(Customers)	 of real;
	!Bandwidth capacity between each pair of nodes
	F_BandwidthCap:				dynamic array(Nodes,Nodes)	 of real;
	!Possible paths for each pair of service and provider
	K_Paths:					dynamic array(Services,Providers) of set of integer;
	K_PathsDown:				dynamic array(Services,Providers) of set of integer;
	!set of paths  using each link
	L_PathsUsingLink:			dynamic array(Nodes,Nodes) of set	of integer;
	!bandwidth usage for path
	U_PathBandwidthUsage:		dynamic array(Paths)				of real;
	! cost of using path k
	C_PathCost:					dynamic array(Paths)				of real;
	
	S_ServiceForCustomer:		set of set of integer; 
	
	J_PathLatency:				dynamic array(Paths)				of real;
	
	G_LatencyReq:				dynamic array(Services)				of real;
	
	D_PathAvailability:			dynamic array(Paths)				of real;
	D_BackupPathAvailability:	dynamic array(BackupPaths)			of real;
	Y_AvailabilityReq:			dynamic array(Services)				of real;
	Symmetric:				boolean;

end-declarations


initialisations from Data	
	R_Revenue;
	F_BandwidthCap;	
	K_Paths;
	K_PathsDown;
	L_PathsUsingLink;
	U_PathBandwidthUsage;
	C_PathCost;
	S_ServiceForCustomer;
	J_PathLatency;
	G_LatencyReq;
	D_PathAvailability;
	D_BackupPathAvailability;
	Y_AvailabilityReq;
	Symmetric;
end-initialisations

if(Symmetric) then
forall(nn in Nodes, mm in Nodes) do
	if(exists(F_BandwidthCap(nn,mm)) and not exists(F_BandwidthCap(mm,nn))) then
			create(F_BandwidthCap(mm,nn));
			F_BandwidthCap(mm,nn):=F_BandwidthCap(nn,mm);
	end-if
end-do
end-if

declarations	
	!Variables
	! - x: binary, placement of service at provider
	x_Placement: 		dynamic array (Services, Providers) 			of mpvar;
	! - y: binary, serving of a customer
	y_Serve:			dynamic array (Customers)						of mpvar;
	! - u: binary, indicates which paths are used
	u_UsePath:			dynamic array (Paths)							of mpvar; 
	! - v: binary, indicated which backup paths are used
	v_UseBackupPath:	dynamic array(BackupPaths)						of mpvar;
end-declarations

! - for all combinations of service and provider
forall (ss in Services, pp in Providers) do
	create (x_Placement(ss,pp));
	x_Placement(ss,pp) is_binary;
end-do

! - for all customers
forall(cc in Customers) do
	create(y_Serve(cc));
	y_Serve(cc) is_binary;
end-do

forall(pp in Paths) do
	create(u_UsePath(pp));
	u_UsePath(pp) is_binary;
end-do

forall (bb in BackupPaths) do
	create(v_UseBackupPath(bb));
	v_UseBackupPath(bb) is_binary;
end-do



!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! CONSTRAINTS
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

declarations
! Objective function
	Total_Profits:																linctr;

! Constraints
	ServeCustomer:					dynamic array(Services)						of linctr;
	UsePath:						dynamic array(Services,Providers)			of linctr;
	UsePathDown:					dynamic array(Services,Providers)			of linctr;
	PathArcBandwidth:				dynamic array(Nodes,Nodes)					of linctr;
	PathLatency:					dynamic array(Services,Providers)			of linctr;
	PathAvailability:				dynamic array(Services,Providers)			of linctr;
end-declarations


! OBJECTIVE FUNCTION
! - total profits from serving customers
Total_Profits := sum (cc in Customers) 
					! R_Revenue from serving customer (if served)
					R_Revenue(cc)*y_Serve(cc)
				- 
				sum(kk in Paths)
					!cost for using a path
					C_PathCost(kk)*u_UsePath(kk);
					
! SERVE CUSTOMER CONSTRAINT
! Customers can only be served if all services for customer is provided
forall(cc in Customers) do
	forall(ss in S_ServiceForCustomer(cc)) do
		ServeCustomer(ss) := sum (pp in Providers) x_Placement(ss,pp) - y_Serve(cc) = 0;
	end-do
end-do

! USE PATH CONSTRAINTS
forall(cc in Customers) do
	forall(ss in S_ServiceForCustomer(cc), pp in Providers) do
		UsePath(ss,pp) := sum(kk in K_Paths(ss,pp)) u_UsePath(kk) - x_Placement(ss,pp) =0;
		UsePathDown(ss,pp) := sum(kk in K_PathsDown(ss,pp) ) u_UsePath(kk) - x_Placement(ss,pp) =0;
	end-do
end-do

forall(nn in Nodes, mm in Nodes | exists(L_PathsUsingLink(nn,mm))) do
	PathArcBandwidth(nn,mm) := sum(kk in L_PathsUsingLink(nn,mm)) U_PathBandwidthUsage(kk)*u_UsePath(kk);
end-do


forall(cc in Customers) do
	forall(ss in S_ServiceForCustomer(cc), pp in Providers) do
	PathLatency(ss,pp) := sum(kk in K_Paths(ss,pp)) u_UsePath(kk)*J_PathLatency(kk) + sum(kk in K_PathsDown(ss,pp)) u_UsePath(kk)*J_PathLatency(kk) <=G_LatencyReq(ss);
	end-do
end-do

forall(cc in Customers) do
	forall(ss in S_ServiceForCustomer(cc), pp in Providers) do
	PathAvailability(ss,pp) := sum(kk in K_Paths(ss,pp)) u_UsePath(kk)*ln(D_PathAvailability(kk)) +sum(kk in K_PathsDown(ss,pp)) u_UsePath(kk)*ln(D_PathAvailability(kk)) + sum(bb in BackupPaths) v_UseBackupPath(bb)* ln(D_BackupPathAvailability(bb))>= ln(Y_AvailabilityReq(ss))* sum(kk in K_Paths(ss,pp)) u_UsePath(kk);
	end-do
end-do










writeln("Model building completed in ", timestamp - timetracker, " seconds");

writeln("Solving model...");
timetracker := timestamp;
maximize(Total_Profits);

if (getprobstat=XPRS_OPT) then
	writeln("Model solved in ", timestamp - timetracker," seconds");
else
	writeln("Model was not solved after ", timestamp - timetracker," seconds");
end-if

writeln("\nTotal Profits: ", getobjval);

! for all customers
forall(cc in Customers) do
	! Check if customer is served
	if (getsol(y_Serve(cc)) > 0.1) then
		! output served customer and generated profits for customer
		writeln("\n\nCustomer ", cc, " (node ",cc,") is being served\n - R_Revenue: ",
			R_Revenue(cc)*getsol(y_Serve(cc)));
		forall(ss in S_ServiceForCustomer(cc), pp in Providers) do
			if(getsol(x_Placement(ss,pp)) > 0.1) then
			writeln("  - Service ",ss," is placed at provider ",pp,"	(latency req: ",G_LatencyReq(ss),")");
			write("	  - Path up: ");
				forall(kk in K_Paths(ss,pp)) do
					if (getsol(u_UsePath(kk)) > 0.1) then
					writeln(kk," , cost: ",C_PathCost(kk)," , latency: ",J_PathLatency(kk));
					end-if
				end-do
			write("	  - Path down: ");
				forall(kk in K_PathsDown(ss,pp)) do
					if (getsol(u_UsePath(kk)) > 0.1) then
					writeln(kk," , cost: ",C_PathCost(kk)," , latency: ",J_PathLatency(kk));
					end-if
				end-do
			end-if
		end-do
	end-if
end-do

				
				
				
				

end-model
